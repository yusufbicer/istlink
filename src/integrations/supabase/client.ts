
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kszyokancjhnxykowaiv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtzenlva2FuY2pobnh5a293YWl2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5ODgzMTcsImV4cCI6MjA1ODU2NDMxN30.Jh0rHXXqx1qody_jmrq6rJnV3TU3z97EYE5HkbsaGO8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a custom type that includes the 'users' table
interface CustomDatabase extends Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          email: string;
          name: string;
          role: 'admin' | 'supplier' | 'customer';
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          email: string;
          name: string;
          role: 'admin' | 'supplier' | 'customer';
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          email?: string;
          name?: string;
          role?: 'admin' | 'supplier' | 'customer';
          created_at?: string;
          updated_at?: string;
        };
      };
      order_notes: {
        Row: {
          id: string;
          order_id: string;
          customer_id: string;
          note_text: string;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          order_id: string;
          customer_id: string;
          note_text: string;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          order_id?: string;
          customer_id?: string;
          note_text?: string;
          created_at?: string;
          updated_at?: string;
        };
      };
    } & Database['public']['Tables'];
  } & Database['public'];
}

export const supabase = createClient<CustomDatabase>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'supabase.auth.token',
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js/2.x'
    },
  },
});

// Helper function to generate a UUID (v4)
export const generateUUID = () => {
  return crypto.randomUUID();
};

// Helper function to handle Supabase errors
export const handleSupabaseError = (error: any, customMessage?: string) => {
  console.error(customMessage || "Supabase operation failed:", error);
  return {
    message: error?.message || "An unknown error occurred",
    details: error?.details || null,
    code: error?.code || null
  };
};

// Helper function to check user role
export const getUserRole = async (): Promise<'admin' | 'supplier' | 'customer' | null> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session?.user) return null;
    
    // Get the user's role from the users table
    const { data, error } = await supabase
      .from('users')
      .select('role')
      .eq('id', session.user.id)
      .maybeSingle();
    
    if (error || !data) {
      console.error("Error getting user role:", error);
      return null;
    }

    return data.role as 'admin' | 'supplier' | 'customer';
  } catch (error) {
    console.error("Error getting user role:", error);
    return null;
  }
};

// Helper function to get the current user's supplier ID
export const getCurrentSupplierID = async (): Promise<string | null> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session?.user) return null;
    
    const { data, error } = await supabase
      .from('suppliers')
      .select('id')
      .eq('user_id', session.user.id)
      .maybeSingle();
    
    if (error || !data) {
      console.error("Error getting supplier ID:", error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error("Error getting supplier ID:", error);
    return null;
  }
};

// Helper function to get the current user's customer ID
export const getCurrentCustomerID = async (): Promise<string | null> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session?.user) return null;
    
    const { data, error } = await supabase
      .from('customers')
      .select('id')
      .eq('user_id', session.user.id)
      .maybeSingle();
    
    if (error || !data) {
      console.error("Error getting customer ID:", error);
      return null;
    }
    
    return data.id;
  } catch (error) {
    console.error("Error getting customer ID:", error);
    return null;
  }
};
